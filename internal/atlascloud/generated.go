// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package atlascloud

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type DirFormat string

const (
	DirFormatAtlas DirFormat = "ATLAS"
)

// Driver is enum for the field driver
type Driver string

const (
	DriverMysql      Driver = "MYSQL"
	DriverPostgresql Driver = "POSTGRESQL"
	DriverSqlite     Driver = "SQLITE"
)

// Input type of UploadDir
type UploadDirInput struct {
	// Repository full name. e.g., "owner/repo".
	Repo string `json:"repo"`
	// Branch name.
	Branch string `json:"branch"`
	// Commit SHA.
	Commit string `json:"commit"`
	// File path relative to the repository root.
	Path string `json:"path"`
	// The URL back to the action that triggers this upload.
	Url string `json:"url"`
	// Project this directory belongs to.
	Name string `json:"name"`
	// Atlas driver used to compute directory state.
	Driver Driver `json:"driver"`
	// Directory content.
	Dir []byte `json:"dir"`
	// Format of the directory.
	DirFormat DirFormat `json:"dirFormat"`
}

// GetRepo returns UploadDirInput.Repo, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetRepo() string { return v.Repo }

// GetBranch returns UploadDirInput.Branch, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetBranch() string { return v.Branch }

// GetCommit returns UploadDirInput.Commit, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetCommit() string { return v.Commit }

// GetPath returns UploadDirInput.Path, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetPath() string { return v.Path }

// GetUrl returns UploadDirInput.Url, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetUrl() string { return v.Url }

// GetName returns UploadDirInput.Name, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetName() string { return v.Name }

// GetDriver returns UploadDirInput.Driver, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetDriver() Driver { return v.Driver }

// GetDir returns UploadDirInput.Dir, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetDir() []byte { return v.Dir }

// GetDirFormat returns UploadDirInput.DirFormat, and is useful for accessing the field via an interface.
func (v *UploadDirInput) GetDirFormat() DirFormat { return v.DirFormat }

// __uploadDirInput is used internally by genqlient
type __uploadDirInput struct {
	Input UploadDirInput `json:"input"`
}

// GetInput returns __uploadDirInput.Input, and is useful for accessing the field via an interface.
func (v *__uploadDirInput) GetInput() UploadDirInput { return v.Input }

// uploadDirResponse is returned by uploadDir on success.
type uploadDirResponse struct {
	// Upload a directory.
	UploadDir uploadDirUploadDirUploadDirPayload `json:"uploadDir"`
}

// GetUploadDir returns uploadDirResponse.UploadDir, and is useful for accessing the field via an interface.
func (v *uploadDirResponse) GetUploadDir() uploadDirUploadDirUploadDirPayload { return v.UploadDir }

// uploadDirUploadDirUploadDirPayload includes the requested fields of the GraphQL type UploadDirPayload.
// The GraphQL type's documentation follows.
//
// Return type of UploadDir.
type uploadDirUploadDirUploadDirPayload struct {
	// Indicate if the operation succeeded.
	Success bool `json:"success"`
}

// GetSuccess returns uploadDirUploadDirUploadDirPayload.Success, and is useful for accessing the field via an interface.
func (v *uploadDirUploadDirUploadDirPayload) GetSuccess() bool { return v.Success }

func uploadDir(
	ctx context.Context,
	client graphql.Client,
	input UploadDirInput,
) (*uploadDirResponse, error) {
	req := &graphql.Request{
		OpName: "uploadDir",
		Query: `
mutation uploadDir ($input: UploadDirInput!) {
	uploadDir(input: $input) {
		success
	}
}
`,
		Variables: &__uploadDirInput{
			Input: input,
		},
	}
	var err error

	var data uploadDirResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
